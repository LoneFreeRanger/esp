# Ray Reilly
# Set-up http secure Stunnel encryption for ESP Elite application server

clear
echo "Checking if this is an ESP application server....."
sleep 3
ELITECHECK1=$(ls -l /u/gui/espip.dat | wc -l)
if [ $ELITECHECK1 -ge 1 ]
then
echo "This appears to be an ESP application server. Continuing..."
sleep 2
else
echo "This does not seem to be an ESP application server."
echo ""
echo "Please make sure to use an ESP application to use this script."
exit
fi 

clear
echo "Checking for key key_http_secure_stunnel.pem within /tmp....."
sleep 3
CERT_PRESENT=$(find /tmp -name key_http_secure_stunnel.pem | wc -l)
if [ $CERT_PRESENT -ge 1 ]
then
echo "Key is present. Continuing...."
sleep 2
else
echo "No key is present. Now exiting. No changes have been made."
echo ""
echo "Please place the http secure stunnel encryption key key_http_secure_stunnel.pem within /tmp on this ESP application server."
exit
fi

clear
echo "Checking to see if certificate seems valid...."
VALID_CERT=$(cat /tmp/key_http_secure_stunnel.pem | grep "WX3K0iunZ9I4h3hIQ3JC3C" | wc -l)
if [ $VALID_CERT -ge 1 ]
then
echo "Certificate appears valid. Continuing...."
sleep 2
else
echo "Certificate key_http_secure_stunnel.pem within /tmp does not seem valid. Now exiting. No changes have been made."
echo ""
echo "Please place the correct deltaquest stunnel encryption key (key_http_secure_stunnel.pem) within /tmp on this e-lite server."
exit
fi

###############

# Install stunnel package if not already installed
yum -y install stunnel

cd /etc/stunnel/

# How the key was originally created on the e-lite server
# openssl genrsa -out key.pem 2048
# Generate a Self-Signed Certificate
# openssl req -new -x509 -key key.pem -out cert.pem -days 14600

# Copy the keys into stunnel configuration
# cat key.pem cert.pem >> /etc/stunnel/stunnel-deltaquest.pem
cp -rf /tmp/key_http_secure_stunnel.pem /etc/stunnel/
chmod 400 /etc/stunnel/key_http_secure_stunnel.pem

# Create stunnel logs directory if not already present
mkdir -p /u/logs/stunnel/

# Get the default Stunnel config file and put in place
#/usr/bin/wget --no-check-certificate 'https://raw.githubusercontent.com/LoneFreeRanger/esp/main/pi/scripts/deltaquest_encryption/e-lite_server_end/stunnel.conf' -O /etc/stunnel/stunnel.conf

###############
clear
# Gather the detail to configure stunnel with
echo "What is the URL in which the e-lite server can be reached at? (i.e: [SITE_ADDRESS_CODE]-p1.esp-elite.com)"
read eliteuniturl
echo $eliteuniturl > /tmp/eliteuniturl
echo ""
echo "=============="
echo ""
echo "What port numnber is the HTTP service running on this Elite application server? [i.e: 60080])"
read httpserviceport
echo $httpserviceport > /tmp/httpserviceport
echo ""
echo "=============="
echo ""
echo "What port numnber is the e-Elite server listening on for HTTP interface connections? [i.e: 50080]"
read eliteunithttpport
echo $eliteunithttpport > /tmp/eliteunithttpport
echo ""
echo "=============="


# Add default the stunnel config for http tunnel
touch /etc/stunnel/stunnel.conf
echo "output = /u/logs/stunnel/stunnel-httpinterface.log" >> /etc/stunnel/stunnel.conf
echo "cert = /etc/stunnel/key_http_secure_stunnel.pem" >> /etc/stunnel/stunnel.conf
echo "key = /etc/stunnel/key_http_secure_stunnel.pem" >> /etc/stunnel/stunnel.conf
echo "pid = /var/run/stunnel4/stunnel-httpinterface.pid" >> /etc/stunnel/stunnel.conf
echo "client = no" >>
echo "fips = no" >> /etc/stunnel/stunnel.conf
echo "debug = 7" >> /etc/stunnel/stunnel.conf
echo "[HTTP_INTERFACE_50080]" >> /etc/stunnel/stunnel.conf
echo "accept = 50080" >> /etc/stunnel/stunnel.conf
echo "connect = 127.0.0.1:60080" >> /etc/stunnel/stunnel.conf

# Re-start the stunnel service
service stunnel restart

# Add firewall rules
clear
echo "Please now manually add the required outnound rules (ie: 5008x and 6008x) ports to the outbound firewall file /etc/firewalld/direct.xml"
echo "if OS is running Redhat 8/ AlmaLinux 8/ CentOS 8 or above."
echo ""
echo "The rules should be in the following format:"
echo ""
echo "<rule ipv="ipv4" table="filter" chain="OUTPUT" priority="1">-p tcp -m tcp --dport 50080 -j ACCEPT</rule>"
echo "<rule ipv="ipv4" table="filter" chain="OUTPUT" priority="1">-p tcp -m tcp --dport 60080 -j ACCEPT</rule>"
echo ""
echo ""
echo "Done."
