# Check if script is being run as the root user
WHO=$(whoami)
if [ $WHO == root ]
then
sleep 0.5
else
echo "Please re-run this script as the root user. Bye!"
exit
fi

# check if this is an e-lite server
clear
echo "Checking if this is an e-lite server....."
sleep 3
ELITECHECK1=$(ls -l /u/espbin/pi_site_setup | wc -l)
ELITECHECK2=$(cat /etc/os-release | grep ID=raspbian | wc -l)
if [ $ELITECHECK1 -ge 1 ] && [ $ELITECHECK2 -ge 1 ]
then
echo "This appears to be an e-lite server. Continuing..."
sleep 2
else
echo "This does not seem to be an e-lite eserver."
echo ""
echo "Please make sure to use an e-lite server to use this script."
exit
fi 


clear
echo "Checking for key key_http_secure_stunnel.pem ....."
sleep 3
CERT_PRESENT=$(find /etc/stunnel -name key_http_secure_stunnel.pem | wc -l)
if [ $CERT_PRESENT -ge 1 ]
then
echo "Key is present. Continuing...."
sleep 2
else
echo "No key is present. Now exiting. No changes have been made."
echo""
echo "This server has not had http secure baseline script run on. Please make sure this is done first."
echo ""
exit
fi

clear
echo "Checking to see if certificate seems valid...."
VALID_CERT=$(cat /etc/stunnel/key_http_secure_stunnel.pem | grep "WX3K0iunZ9I4h3hIQ3JC3C" | wc -l)
if [ $VALID_CERT -ge 1 ]
then
echo "Certificate appears valid. Continuing...."
sleep 2
else
echo ""
echo "This e-lite unit has not had http secure baseline script run on. Please make sure this is done first."
exit
fi


###############

clear
# Gather the detail to configure stunnel with
echo ""
echo "What port numnber is the HTTP service running on the Elite application server? [i.e: 6008x])"
read httpserviceport
echo $httpserviceport > /tmp/httpserviceport
echo ""
echo "=============="
echo ""
echo "What port numnber is this e-Elite server going to listen on for HTTP interface connections? [i.e: 5008x]"
read eliteunithttpport
echo $eliteunithttpport > /tmp/eliteunithttpport
echo ""
echo "=============="
echo ""
echo "What is the URL of the remote ESP application server? [i.e: [SITE_ADDRESS_CODE]-s1.esp-elite.com]"
read serverurl
echo $serverurl > /tmp/serverurl
echo ""
echo "=============="
echo ""
echo "What is site's address code?"
read siteid
echo $siteid > /tmp/siteid 
echo ""
clear

# Get the default http stunnel config file
/usr/bin/wget --no-check-certificate https://raw.githubusercontent.com/LoneFreeRanger/esp/main/pi/scripts/http_interface_secure/e-lite_server_end/httpsecure-%5Bsiteid%5D-%5Beliteunithttpport%5D-tunnel -O /u/tunnels/httpsecure-[siteid]-[eliteunithttpport]-tunnel
chmod 777 /u/tunnels/httpsecure-[siteid]-[eliteunithttpport]-tunnel

# Configure the stunnel config file port with detail supplied
sed -i 's/eliteunithttpport/'$(cat /tmp/eliteunithttpport)'/g' /u/tunnels/httpsecure-[siteid]-[eliteunithttpport]-tunnel

# Configure the stunnel config file siteid with detail supplied
sed -i 's/siteid/'$(cat /tmp/siteid)'/g' /u/tunnels/httpsecure-[siteid]-[eliteunithttpport]-tunnel

# Configure the stunnel config file httpserviceport with detail supplied
sed -i 's/httpserviceport/'$(cat /tmp/httpserviceport)'/g' /u/tunnels/httpsecure-[siteid]-[eliteunithttpport]-tunnel

# Configure the stunnek config file serverurl with the detail supplied
sed -i 's/serverurl/'$(cat /tmp/serverurl)'/g' /u/tunnels/httpsecure-[siteid]-[eliteunithttpport]-tunnel

# Rename the stunnel config file with detail supplied
mv /u/tunnels/httpsecure-[siteid]-[eliteunithttpport]-tunnel /u/tunnels/httpsecure-$(cat /tmp/siteid)-$(cat /tmp/eliteunithttpport)-tunnel


#############

###
### Due to a bug in stunnel, whenever you try to start stunnel via an OS service, an error of
### "Address already in use (98)" will also show even though the port (address) is not in use!!!!
### As such it is a requirement to start the stunnel server instance via script run from the root cron which works.
### Lots of articles about this online. As such the below to create service file is defunct but kept for reference.

# Download default http stunnel OS service file
# /usr/bin/wget --no-check-certificate https://raw.githubusercontent.com/LoneFreeRanger/esp/main/pi/scripts/http_interface_secure/e-lite_server_end/stunnel-httpsecure-%5Bsiteid%5D-%5Beliteunithttpport%5D.service -O /lib/systemd/system/stunnel-httpsecure-[siteid]-[eliteunithttpport].service
# chmod 777 /lib/systemd/system/stunnel-httpsecure-[siteid]-[eliteunithttpport].service

# Configure the stunnel OS service file with port detail supplied
# sed -i 's/eliteunithttpport/'$(cat /tmp/eliteunithttpport)'/g' /lib/systemd/system/stunnel-httpsecure-[siteid]-[eliteunithttpport].service

# Configure the stunnel OS service file with siteid  detail supplied
# sed -i 's/siteid/'$(cat /tmp/siteid)'/g' /lib/systemd/system/stunnel-httpsecure-[siteid]-[eliteunithttpport].service

# Configure the stunnel OS service file with httpserviceport detail supplied
# sed -i 's/httpserviceport/'$(cat /tmp/httpserviceport)'/g' /lib/systemd/system/stunnel-httpsecure-[siteid]-[eliteunithttpport].service

# Rename the default OS service file with detail supplied
# mv /lib/systemd/system/stunnel-httpsecure-[siteid]-[eliteunithttpport].service /lib/systemd/system/stunnel-httpsecure-$(cat /tmp/siteid)-$(cat /tmp/eliteunithttpport).service

# Load the new service into the Pi OS, enable on boot and start the service
# systemctl daemon-reload
# systemctl enable stunnel-httpsecure-$(cat /tmp/siteid)-$(cat /tmp/eliteunithttpport).service
# systemctl start stunnel-httpsecure-$(cat /tmp/siteid)-$(cat /tmp/eliteunithttpport).service

#############

# Set the tunnel to start on e-lite unit boot via the startstunnels script invoked via root cron
echo "/usr/bin/stunnel /u/tunnels/httpsecure-$(cat /tmp/siteid)-$(cat /tmp/eliteunithttpport)-tunnel" >> /u/tunnels/startstunnels

# Start the tunnel up
/usr/bin/stunnel /u/tunnels/httpsecure-$(cat /tmp/siteid)-$(cat /tmp/eliteunithttpport)-tunnel

clear
echo ""
echo "Please now add the $(cat /tmp/eliteunithttpport) port to the e-lite unit firewall rule file /etc/iptables.firewall.rules followed by"
echo "re-loading the file via the command '/sbin/iptables-restore < /etc/iptables.firewall.rules'. This will permit users to connect."
echo ""
echo "Following this the tunnel will then be ready to use given that the ESP applucation server end work for the tunnel has been done."
echo ""

